package myjavademos;

// Abstract class
abstract class Shopping {
    Shopping() {
        System.out.println("Abstract class Default Constructor!");
    }

    void offers() {
        System.out.println("10-30% discount");
    }

    abstract void paymentGateway(); // abstract method
    abstract void delivery();       // abstract method
}

// Abstract subclass (partially implemented — not used here, just to show concept)
abstract class Amazon extends Shopping {
    @Override
    void paymentGateway() {
        System.out.println("Amazon::paytm, paypal!");
    }
    // delivery() not implemented → so this class is still abstract
}

// Concrete subclass
class Myntra extends Shopping {
    @Override
    void paymentGateway() {
        System.out.println("Myntra::paytm, paypal!");
    }

    @Override
    void delivery() {
        System.out.println("10 days delivery notice");
    }

    void feedback() {
        System.out.println("Good feedback!");
    }
}

// Main class to run the demo
public class AbstractClassesDemo {
    public static void main(String[] args) {
        // Direct object of concrete class
        Myntra m = new Myntra();
        m.paymentGateway();
        m.delivery();
        m.offers();
        m.feedback();

        // Polymorphic reference
        Shopping s = new Myntra();
        s.paymentGateway();
        s.delivery();
        s.offers();

        // Downcasting to access feedback() of Myntra
        ((Myntra) s).feedback();
    }
}
