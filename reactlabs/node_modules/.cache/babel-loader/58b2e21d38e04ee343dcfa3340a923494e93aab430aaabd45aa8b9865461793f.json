{"ast":null,"code":"var _jsxFileName = \"/Users/banu_nallamothu/react-labs/src/TelevisionLab12.js\";\n// Importing React and Component base class from 'react'\nimport React, { Component } from \"react\";\n\n//  Functional Component to display the list of televisions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TelevisionList({\n  models\n}) {\n  // Receives \"models\" array as props\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83D\\uDCFA Available Television Models\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: models.map((tv, index) =>\n      /*#__PURE__*/\n      // Each item must have a unique key\n      _jsxDEV(\"li\", {\n        children: tv\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n// Class Component - Works as the Manager\n_c = TelevisionList;\nclass TelevisionManager extends Component {\n  // Constructor for initializing the componentâ€™s state\n  constructor(props) {\n    super(props); // Call parent constructor\n\n    // State contains list of models and input field for new model\n    // Event handler for input box changes\n    this.handleChange = event => {\n      // Update state dynamically based on what is typed\n      this.setState({\n        newModel: event.target.value\n      });\n    };\n    // Event handler for adding new TV model\n    this.addModel = () => {\n      // Prevent adding blank values\n      if (this.state.newModel.trim() === \"\") return;\n\n      // Update state using spread operator\n      this.setState(prevState => ({\n        models: [...prevState.models, prevState.newModel],\n        // add new model\n        newModel: \"\" // reset the input field\n      }));\n    };\n    this.state = {\n      models: [\"Sony Bravia\", \"Samsung Neo QLED\", \"LG OLED\"],\n      // initial TV models\n      newModel: \"\" // input field state (controlled component)\n    };\n  }\n  // Render method - what appears on browser\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Lab 12 - Television Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control w-50 d-inline\",\n        placeholder: \"Enter new television model\",\n        value: this.state.newModel // Controlled input (value comes from state)\n        ,\n        onChange: this.handleChange // Updates state when user types\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary ms-2\",\n        onClick: this.addModel // Calls addModel function\n        ,\n        children: \"Add Television\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TelevisionList, {\n        models: this.state.models\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Export component so it can be used in App.js\nexport default TelevisionManager;\nvar _c;\n$RefreshReg$(_c, \"TelevisionList\");","map":{"version":3,"names":["React","Component","jsxDEV","_jsxDEV","TelevisionList","models","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tv","index","_c","TelevisionManager","constructor","props","handleChange","event","setState","newModel","target","value","addModel","state","trim","prevState","render","className","type","placeholder","onChange","onClick","$RefreshReg$"],"sources":["/Users/banu_nallamothu/react-labs/src/TelevisionLab12.js"],"sourcesContent":["// Importing React and Component base class from 'react'\nimport React, { Component } from \"react\";\n\n//  Functional Component to display the list of televisions\nfunction TelevisionList({ models }) {\n  // Receives \"models\" array as props\n  return (\n    <div>\n      {/* Section heading */}\n      <h3>ðŸ“º Available Television Models</h3>\n      \n      {/* Render models dynamically inside <ul> */}\n      <ul>\n        {models.map((tv, index) => (\n          // Each item must have a unique key\n          <li key={index}>{tv}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n// Class Component - Works as the Manager\nclass TelevisionManager extends Component {\n  // Constructor for initializing the componentâ€™s state\n  constructor(props) {\n    super(props); // Call parent constructor\n    \n    // State contains list of models and input field for new model\n    this.state = {\n      models: [\"Sony Bravia\", \"Samsung Neo QLED\", \"LG OLED\"], // initial TV models\n      newModel: \"\" // input field state (controlled component)\n    };\n  }\n\n  // Event handler for input box changes\n  handleChange = (event) => {\n    // Update state dynamically based on what is typed\n    this.setState({ newModel: event.target.value });\n  };\n\n  // Event handler for adding new TV model\n  addModel = () => {\n    // Prevent adding blank values\n    if (this.state.newModel.trim() === \"\") return;\n\n    // Update state using spread operator\n    this.setState((prevState) => ({\n      models: [...prevState.models, prevState.newModel], // add new model\n      newModel: \"\" // reset the input field\n    }));\n  };\n\n  // Render method - what appears on browser\n  render() {\n    return (\n      <div className=\"container mt-3\">\n        {/* Section title */}\n        <h2>Lab 12 - Television Manager</h2>\n\n        {/* Input box for typing new model */}\n        <input\n          type=\"text\"\n          className=\"form-control w-50 d-inline\"\n          placeholder=\"Enter new television model\"\n          value={this.state.newModel}  // Controlled input (value comes from state)\n          onChange={this.handleChange} // Updates state when user types\n        />\n\n        {/* Add button */}\n        <button\n          className=\"btn btn-primary ms-2\"\n          onClick={this.addModel} // Calls addModel function\n        >\n          Add Television\n        </button>\n\n        {/* Passing the models array as props to TelevisionList */}\n        <TelevisionList models={this.state.models} />\n      </div>\n    );\n  }\n}\n\n// Export component so it can be used in App.js\nexport default TelevisionManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}